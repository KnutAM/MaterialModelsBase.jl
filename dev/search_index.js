var documenterSearchIndex = {"docs":
[{"location":"differentiation/#Differentation-of-a-material","page":"Differentiation","title":"Differentation of a material","text":"","category":"section"},{"location":"differentiation/","page":"Differentiation","title":"Differentiation","text":"getnumtensorcomponents\ngetnumstatevars\ngetnumparams","category":"page"},{"location":"differentiation/#MaterialModelsBase.getnumtensorcomponents","page":"Differentiation","title":"MaterialModelsBase.getnumtensorcomponents","text":"getnumtensorcomponents(::AbstractMaterial)\n\nReturns the number of independent components for the given material. \n\nIf the material works with the small strain tensor and Cauchy stress, return 6 (default)\nIf the material works with the deformation gradient and the 1st Piola-Kirchhoff stress, return 9\nIf the material is a cohesive material working with vectors, return the number of vector components (e.g. 3)\n\nDefaults to 6 if not overloaded\n\n\n\n\n\n","category":"function"},{"location":"differentiation/#MaterialModelsBase.getnumstatevars","page":"Differentiation","title":"MaterialModelsBase.getnumstatevars","text":"getnumstatevars(m::AbstractMaterial)\n\nReturn the number of state variables. A tensorial state variable should be counted by how many components it has.  E.g. if a state consists of one scalar and one symmetric 2nd order tensor, getnumstatevars should return 7 (if the space dimension is 3).\n\nDefaults to 0 if not overloaded\n\n\n\n\n\n","category":"function"},{"location":"differentiation/","page":"Differentiation","title":"Differentiation","text":"material2vector!\nvector2material\nmaterial2vector","category":"page"},{"location":"differentiation/#MaterialModelsBase.material2vector!","page":"Differentiation","title":"MaterialModelsBase.material2vector!","text":"material2vector!(v::AbstractVector, m::AbstractMaterial)\n\nPut the material parameters of m into the vector m.  This is typically used when the parameters should be fitted.\n\n\n\n\n\n","category":"function"},{"location":"differentiation/#MaterialModelsBase.vector2material","page":"Differentiation","title":"MaterialModelsBase.vector2material","text":"vector2material(v::AbstractVector, ::MT) where {MT<:AbstractMaterial}\n\nCreate a material of type MT with the parameters according to v\n\n\n\n\n\n","category":"function"},{"location":"differentiation/#MaterialModelsBase.material2vector","page":"Differentiation","title":"MaterialModelsBase.material2vector","text":"material2vector(m::AbstractMaterial)\n\nOut-of place version of material2vector!. Given getnumparams, this function does not need to be overloaded unless another datatype than Float64 should be used.\n\n\n\n\n\n","category":"function"},{"location":"differentiation/","page":"Differentiation","title":"Differentiation","text":"MaterialDerivatives\nallocate_differentiation_output\ndifferentiate_material!","category":"page"},{"location":"differentiation/#MaterialModelsBase.MaterialDerivatives","page":"Differentiation","title":"MaterialModelsBase.MaterialDerivatives","text":"MaterialDerivatives(m::AbstractMaterial, T=Float64)\n\nA struct that saves all derivative information using a Matrix{T} for each derivative. If getnumtensorcomponents, getnumstatevars, and getnumparams are implemented for m, MaterialDerivatives does not need to be overloaded for m. \n\n\n\n\n\n","category":"type"},{"location":"differentiation/#MaterialModelsBase.allocate_differentiation_output","page":"Differentiation","title":"MaterialModelsBase.allocate_differentiation_output","text":"allocate_differentiation_output(::AbstractMaterial)\n\nWhen calculating the derivatives of a material, it can often be advantageous to have additional  information from the solution procedure inside material_response. This can be obtained via an  AbstractExtraOutput, and allocate_differentiation_output provides a standard function name  for what extra_output::AbstractExtraOutput that should be allocated in such cases.\n\nDefaults to an NoExtraOutput if not overloaded. \n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MaterialModelsBase","category":"page"},{"location":"#MaterialModelsBase","page":"Home","title":"MaterialModelsBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MaterialModelsBase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main purpose of this package is to provide a unifying interface,  facilitating the interchanging of material models between researchers.  The standard use case is described below. In addition, the following  extra features are included","category":"page"},{"location":"","page":"Home","title":"Home","text":"Stress iterations\nDifferentiation wrt. material parameters","category":"page"},{"location":"#Standard-interface","page":"Home","title":"Standard interface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The main function is the material_response function that  primarly dispatches on the AbstractMaterial input type. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"material_response","category":"page"},{"location":"#MaterialModelsBase.material_response","page":"Home","title":"MaterialModelsBase.material_response","text":"material_response(m::AbstractMaterial, ϵ::SymmetricTensor{2}, old::AbstractMaterialState, Δt, cache::AbstractMaterialCache, extras::AbstractExtraOutput; options)\n\nmaterial_response(m::AbstractMaterial, F::Tensor{2}, old::AbstractMaterialState, Δt, cache::AbstractMaterialCache, extras::AbstractExtraOutput; options)\n\nmaterial_response(m::AbstractMaterial, u::Vec, old::AbstractMaterialState, Δt, cache::AbstractMaterialCache, extras::AbstractExtraOutput; options)\n\nCalculate the stress/traction, stiffness and updated state variables for the material m, given the strain input ϵ, the deformation gradient F, or the deformation vector u\n\nMandatory arguments\n\nm: Defines the material and its parameters\nThe second input can be one of\nϵ::SymmetricTensor{2}: The total small strain tensor at the end of the increment\nF::Tensor{2}: The total deformation gradient at the end of the increment\nu::Vec: The deformation at the end of the increment (for cohesive elements)\nold::AbstractMaterialState: The material state variables at the end of the last converged increment   The material initial material state can be obtained by the initial_material_state function.\n\nOptional positional arguments\n\nΔt: The time step in the current increment. The default may depend on the material. \ncache::AbstractMaterialCache: Cache variables that can be used to avoid allocations during each call to the material_response function   This can be created by the get_cache function.\nextras: Updated with requested extra output. Defaults to the empty struct NoExtraOutput\n\nOptional keyword arguments\n\noptions: Additional options that may be specific for each material. Defaults to nothing\n\nOutput\n\nIf the second input is the deformation gradient boldsymbolF (F::Tensor{2})`, the outputs are\nP::Tensor{2}: First Piola-Kirchhoff stress, boldsymbolP\ndPdF::Tensor{4}: Algorithmic tangent stiffness tensor, mathrmdboldsymbolPmathrmdboldsymbolF\nstate::AbstractMaterialState: The updated material state variables at the end of the time increment\nIf the second input is the small strain tensor, boldsymbolepsilon (ϵ::SymmetricTensor{2}), the outputs are\nσ::SymmetricTensor{2}: Cauchy stress tensor, boldsymbolsigma\ndσdϵ::SymmetricTensor{4}: Algorithmic tangent stiffness tensor, mathrmdboldsymbolsigmamathrmdboldsymbolepsilon\nstate::AbstractMaterialState: The updated material state variables at the end of the time increment\nIf the second input is deformation vector, boldsymbolu (u::Vec), the outputs are\nt::Vec: Traction vector, boldsymbolt\ndtdu::SecondOrderTensor: Algorithmic tangent stiffness tensor, mathrmdboldsymboltmathrmdboldsymbolu\nstate::AbstractMaterialState: The updated material state variables at the end of the time increment\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Additionally, the following types and functions could be defined for a material","category":"page"},{"location":"","page":"Home","title":"Home","text":"initial_material_state","category":"page"},{"location":"#MaterialModelsBase.initial_material_state","page":"Home","title":"MaterialModelsBase.initial_material_state","text":"initial_material_state(m::AbstractMaterial)\n\nReturn the (default) initial state::AbstractMaterialState  of the material m. \n\nDefaults to the empty NoMaterialState()\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"get_cache","category":"page"},{"location":"#MaterialModelsBase.get_cache","page":"Home","title":"MaterialModelsBase.get_cache","text":"get_cache(m::AbstractMaterial)\n\nReturn a cache::AbstractMaterialCache that can be used when  calling the material to reduce allocations\n\nDefaults to the empty NoMaterialCache()\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"AbstractExtraOutput","category":"page"},{"location":"#MaterialModelsBase.AbstractExtraOutput","page":"Home","title":"MaterialModelsBase.AbstractExtraOutput","text":"AbstractExtraOutput()\n\nBy allocating an AbstractExtraOutput type, this type can be mutated to extract additional information from the internal calculations  in material_response only in cases when this is desired.  E.g., when calculating derivatives.  The concrete NoExtraOutput<:AbstractExtraOutput exists for the case when no additional output should be calculated. \n\n\n\n\n\n","category":"type"}]
}
