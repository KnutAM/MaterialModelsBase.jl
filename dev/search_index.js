var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MaterialModelsBase","category":"page"},{"location":"#MaterialModelsBase","page":"Home","title":"MaterialModelsBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MaterialModelsBase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MaterialModelsBase]","category":"page"},{"location":"#MaterialModelsBase.NoLocalConvergence","page":"Home","title":"MaterialModelsBase.NoLocalConvergence","text":"NoLocalConvergence(msg::String)\n\nThrow if the material_response routine doesn't converge internally\n\n\n\n\n\n","category":"type"},{"location":"#MaterialModelsBase.NoStressConvergence","page":"Home","title":"MaterialModelsBase.NoStressConvergence","text":"NoStressConvergence(msg::String)\n\nThrow if the stress iterations don't converge\n\n\n\n\n\n","category":"type"},{"location":"#MaterialModelsBase.get_cache-Tuple{AbstractMaterial}","page":"Home","title":"MaterialModelsBase.get_cache","text":"get_cache(m::AbstractMaterial)\n\nReturn a cache that can be used when calling the material to reduce allocations TODO: Rename to allocate_cache?\n\n\n\n\n\n","category":"method"},{"location":"#MaterialModelsBase.initial_material_state-Tuple{AbstractMaterial}","page":"Home","title":"MaterialModelsBase.initial_material_state","text":"get_initial_state(m::AbstractMaterial)\n\nReturn the (default) initial state of the material m\n\n\n\n\n\n","category":"method"},{"location":"#MaterialModelsBase.material_response","page":"Home","title":"MaterialModelsBase.material_response","text":"material_response(m::AbstractMaterial, ϵ::SymmetricTensor{2}, old::AbstractMaterialState, Δt, cache::AbstractMaterialCache, extras::AbstractExtraOutput; options)\n\nmaterial_response(m::AbstractMaterial, F::Tensor{2}, old::AbstractMaterialState, Δt, cache::AbstractMaterialCache, extras::AbstractExtraOutput; options)\n\nmaterial_response(m::AbstractMaterial, u::Vec, old::AbstractMaterialState, Δt, cache::AbstractMaterialCache, extras::AbstractExtraOutput; options)\n\nCalculate the stress/traction, stiffness and updated state variables for the material m, given the strain input ϵ, the deformation gradient F, or the deformation vector u\n\nMandatory arguments\n\nm: Defines the material and its parameters\nThe second input can be one of\nϵ::SymmetricTensor{2}: The total small strain tensor at the end of the increment\nF::Tensor{2}: The total deformation gradient at the end of the increment\nu::Vec: The deformation at the end of the increment (for cohesive elements)\nold::AbstractMaterialState: The material state variables at the end of the last converged increment   The material initial material state can be obtained by the initial_material_state function.\n\nOptional positional arguments\n\nΔt: The time step in the current increment. The default may depend on the material. \ncache::AbstractMaterialCache: Cache variables that can be used to avoid allocations during each call to the material_response function   This can be created by the get_cache function.\nextras: Updated with requested extra output. Defaults to the empty struct NoExtraOutput\n\nOptional keyword arguments\n\noptions: Additional options that may be specific for each material. Defaults to nothing\n\nOutput\n\nIf the second input is the deformation gradient boldsymbolF (F::Tensor{2})`, the outputs are\nP::Tensor{2}: First Piola-Kirchhoff stress, boldsymbolP\ndPdF::Tensor{4}: Algorithmic tangent stiffness tensor, mathrmdboldsymbolPmathrmdboldsymbolF\nstate::AbstractMaterialState: The updated material state variables at the end of the time increment\nIf the second input is the small strain tensor, boldsymbolepsilon (ϵ::SymmetricTensor{2}), the outputs are\nσ::SymmetricTensor{2}: Cauchy stress tensor, boldsymbolsigma\ndσdϵ::SymmetricTensor{4}: Algorithmic tangent stiffness tensor, mathrmdboldsymbolsigmamathrmdboldsymbolepsilon\nstate::AbstractMaterialState: The updated material state variables at the end of the time increment\nIf the second input is deformation vector, boldsymbolu (u::Vec), the outputs are\nt::Vec: Traction vector, boldsymbolt\ndtdu::SecondOrderTensor: Algorithmic tangent stiffness tensor, mathrmdboldsymboltmathrmdboldsymbolu\nstate::AbstractMaterialState: The updated material state variables at the end of the time increment\n\n\n\n\n\n","category":"function"}]
}
